# 전설의 phpmyadmin
우리는 django admin은 필요없다. 
**phpmysql** 이 있잖아?
---
# 웹 프로그래밍의 아주 자세한 절차
대부분의 웹 프로그래밍은
1 입력을 검증하고
2 입력을 일부 변경해서
3 데이터베이스에 쿼리를 실행하고
4 결과를 받아서 리턴하거나 다시 2번으로 넘어가는 행위를 반복할 뿐이다.

본질보다 사용법에 집중하는 것이 옳을까?
---
# 절차지향과 객체지향의 차이
절차지향과 객체지향의 차이는 데이터의 흐름이 함수를 통해서 흐르는가 아니면 객체를 통해 흐르는가의 차이 정도이다.
객체는 자신의 상태를 들고있기 때문에 메인 플로우에 집중할 수 있다는 게 장점이다.
그런데 결정적으로 웹 프로그래밍에서 그렇게까지 복잡한 플로우를 타는 게 얼마나 있지?
---
# 파일 경로와 실제 경로와의 매핑
파일 경로와 실제 경로가 매핑되면 안되는 이유가 뭐가 있을까?
include 된 파일이 전역 객체에 접근하지 못해서 오류를 내뿜는 것 외에는 도저히 생각이 안 난다.
그리고 이런 케이스는 **전역 상수가 있는지 체크하는 것** 만으로도 쉽게 막을 수 있지.

사용자가 웹브라우저로 데이터베이스의 접근 프로퍼티 내용을 볼 수 있다고?
난 도대체 어떻게 코드를 짜면 config 코드가 그대로 노출될 수 있는지 상상도 안간다.
---

# php의 진정한 매력 
php의 진정한 매력은 한달 뒤에 내가 짠 코드를 보면서 왜 이렇게 짰는지 이 코드의 의미는 무엇인지 깊이 생각하고 음미하는 것.
---
# 개발의 본질
개발은 번거롭고 반복되는 일을 간단하게 끊임없이 줄여나가는 것이다. 
그런 과정을 모두 이해하지 못하면 벽에 부딛히고 그 벽을 뚫으면서 성장한다.
---

# POPL 은 절대 안 없엘 예정
남들에게 잘 맞는 옷이 나에게도 잘 맞는 것은 아니다. 
popl도 나를 위한 도구다.
내가 PHP 개발에서 손을 놓는 날 폐지 여부가 결정되겠지.

---
# 타인의 코드
누구도 남의 코드를 보고 싶어하지는 않지만 어쩔 수 없이 보면서 욕해요. 
---
# 객체는 만능이 아니다.
객체는 만능이 아닙니다.
물론 함수도 마찬가지죠.
---
# 자유는 준비된 자의 것
자유는 준비된 자의 것. 
동작을 이해하고 스스로 제어할 수 있지 않다면 평생 남의 힘으로 살아야 한다.
---
# 추상화의 패러독스
추상화 계층이 두꺼워질수록 특정 기능은 빠르고 쉽게 만들지만 특정 기능은 아얘 못만든다.
---
# 프레임워크 III
프레임워크는 훌륭하다. 
프레임워크 이면의 동작을 이해할 수 있다면.
---
# 프레임워크 II
프레임워크는 훌륭하다. 
내가 기존에 만든 코드를 못 쓴다는 점만 제외한다면.
---
# 프레임워크 I
프레임워크는 훌륭하다.
엄청난 학습 곡선을 제외하면. 
---

# 다른사람이 만든 코드를 유지보수할 때 가장 좋은 방법
다른사람이 만든 코드를 유지보수할 때 가장 좋은 방법은? 
바로 기존의 코딩 스타일을 그대로 복사하는거다. 
스타일이 달라지면 내용도 달라져 버린다.
---
# 협업은 멋진 말이다.
협업은 멋진 말이다. 
두사람의 생각이 완전히 일치한다면 말이다.
---
# 복사 붙여넣기와 기능 쪼개기
복사 붙여넣기는 굉장히 혐오시되지만, 미묘하게 다른 두가지 기능을 복사 붙여넣기 없이 스무개의 인터페이스와 파일로 쪼개는 것도 그다지 멋진 생각은 아닌것 같다.
---
# 대부분의 PHP 웹 어플리케이션이 하는 일
대부분의 PHP 웹 어플리케이션은 요청을 받아서 데이터베이스를 뒤진 다음 그걸 반환하는 역할만 한다.
더 복잡한 건 파이썬이나 자바 혹은 닷넷에 맞기자. 노드도 좋다.
---
# 기능이 여러곳에 나누어져 있을 때의 난제
기능이 여러곳에 나누어져 있을 때의 난제.
이 메서드를 고쳐야 하는데 고치면 어딘가 다른 곳에서 호출할 까봐 자신이 없다.
그래서 아주아주 비슷하지만 미묘하게 기능이 다른 메서드를 다시 만드는 경험 안해본 개발자가 있다면 아직 진짜 개발자가 되지 않은 것이다.
물론 `open call hierarchy` 기능으로 찾아볼 수는 있지만, 안타깝게도 본인이 수정할 필요가 없는 다른 메서드의 내용을 다 검토하는 사람은 잘 없을 것 같다.

---
# 파일은 하나만 수정하자.
자바 스프링에서 엔드포인트 하나를 추가하기 위해 파일 몇개를 고쳐야 하는지 아는 php 개발자분?
최소한 5개다.
우리는 완전한 소스 코드를 하나 고치는데 **파일 한개**만 고치면 된다.


---

# 쿼리스트링은 나쁜가?
쿼리스트링이 있으면 안되는 이유 아는 사람? 
웹의 GET 요청은 원래 쿼리스트링이 기본인데 어느샌가 나쁘게 인식되는 건 좀 이상하다.

---
# popl 은 mysql만 지원해요
mysql만 지원해요. 
다들 php에서는 mysql 쓰시잖아요?

당신의 인생에 한번도 안 쓸 가능성이 높은 IBM DB2를 위한 퍼시스턴스 레이어가 정말 필요한가요?
---

# 파일 12개
버그를 수정하기 위해 파일을 열두개 여는 일은 그만하자.
12개까지 되지는 않는다고?
6개 정도는 IDE에서 탭으로 다 보이니 별 관계없으려나?

---
# 유지보수가 잘 되는 코드 
유지보수가 잘 되는 코드는 당신이 짤리기 좋은 코드다.
<a href='http://m.hanbit.co.kr/store/books/book_view.html?p_code=E2375873090'>유지보수 하기 어렵게 코딩하는 법</a> 책을 추천한다. 
게다가 무료다.
---
# 비지니스와 아키텍쳐
비지니스를 빠르게 만드는것이 멋진 아키텍쳐를 구축하는 것보다 더 중요하다.

---
# 클린코드
클린코드는 일단 코드가 작동해야 의미가 있는 거다
---
# 전역 변수와 객체지향
전역 변수가 객체지향에 어긋난다고? 
**뭐 어때.** 
오염만 안 시키면 되지. 
개발자를 믿자.

어차피 막아놔도 돌아서 할 사람은 다 한다.

---
# 모든 걸 잘하기
모든 걸 다 잘 하는 건 어렵거나 불가능하거나 혹은 너무 오래걸린다
---
# 선입견과 관습
선입견과 관습은 늘 타파해야 하는 것만은 아니다. 
전통에는 이유가 있는 법이다.
---
# 레거시 php 개발자.
우리는 늙었고 새로운 걸 배우기는 너무 늦었기 때문에 함수와 require 만으로 처리한다
---
# 아키텍쳐를 잘 잡으면 나중에 수월해질 것 같지? 
원래 95%의 코드는 비슷하기 때문에 그럴수도 있다만 나머지 5퍼센트를 해결하려면 어떻게든 아키텍쳐를 돌아가야 한다.
---

# 유지보수의 어려움
주체할 수 없이 커져서 유지보수가 힘들다고? 
그럴 때를 위해서 **차세대**라는 말이 있는 거다.
---

# 인스턴트 시대다. 
장인이 하나씩 뚝딱거리는 건 멋지고 그럴듯해 보이지만 이케아보다 많이 팔지는 못한다.
---
# 때론 새로 만드는 게 더 빠르다.
사실은 대부분의 경우에.
기존 코드를 찾아서 사이드이펙트가 없는지 찾은 다음 수정하고 재사용하느니 새로 만드는 게 빠르다
---
# 클래스 만능 주의자들
그들은 클래스밖에 경험해 보지 못했기 떄문에 모든것이 클래스로 보이는거야.
---

# mvc가 강하게 커플링 되어 있다고? 
그게 어쨌다는 건가?
어차피 뭔가 기능을 추가할 때는 새로 만들 꺼잖아?
POPL 에는 명시적인 MVC는 없지만 분명 그 역할을 하는 **함수** 들은 있지.
함수가 서로 호출하는 것이 어때서?

---
# 레이어를 나누는 것이 무적은 아니다.
나누어진 레이어는 이 코드를 어디에 넣어야 할 지 고민할 꺼리만 늘린다.

---
# 스프링 레이어
Controller
View
Data Model (VO or DTO)
Repository
Requst Model
Service
Service Impl
XML (MyBatis)

이게 페이지 하나를 만들기 위해 필요한 (최소한의) 것들.

---
# mvc는 그저 이상론에 불과하다.
내 개발 인생에서 한번도 퍼블리셔 혹은 그에 준하는 사람들이 템플릿 엔진을 이해하는 걸 본 적이 없다.
어차피 퍼블리싱된 html을 받아서 다시 한번 개발자가 손대야 한다.
뷰를 분리할 수 없다면 VC 분리는 의미가 없고, 데이터 레이어에 쉽게 접근할 수 없다면 모델도 불필요하지 않나?

# 뷰는 그냥 뷰다.
뭘 더 바라지? 왜 템플릿 엔진이 또 있어서 파서가 따로 있어야 하지? 

---
# 너무 방법론에 집착하지 말자.  
간단한 기능 하나를 위해서 파일을 5개쯤 만드는데 그 이유도 모른다면 그게 더 나쁜 것 아닌가?

---
# mvc는 필요없다.
컨트롤러가 데이터베이스까지 처리한다.  
우리에겐 모델을 만들고 정의하는 시간도 아깝기 때문이다.  
서비스? 그게 뭔데? 

---
# 커맨드 라인 인터페이스는 없다. 
모든 개발자가 다 커맨드를 잘 쓴다고 누가 그래?

---
# 파일 경로와 실제 웹 경로가 일치하는 건 사실 지극히 정상적인 것이다.  
원래 http 프로토콜은 웹 상에서 디렉토리 구조에 따라 정적으로 존재하는 html 파일을 보기 위해 만들어졌다.

---
# fancy url에 집착하지 말자
웹 주소가 `.php` 로 끝나도 대부분의 사용자는 그다지 신경쓰지 않는다.  
심지어는 사용자 대부분은 그 사실 자체를 잘 모를 것이다.  
그러니 너무 fancy url (clean url) 에 집착하지 말자.  
SEO에 치명적이라고? 구글이 바보가 아닌 이상 컨텐츠가 좋으면 url이 팬시하던 말던 별 상관없지 않을까?

---
# 라이브러리와 프레임워크의 차이
라이브러리와 프레임워크를 구별하는 가장 큰 포인트는 누가 제어권을 가져가는가에 있다.  
라이브러리는 개발자가 흐름을 제어하고 필요한 라이브러리를 가져다가 쓴다.  
프레임워크는 프레임워크가 흐름을 제어하고 개발자는 규칙에 따라 부품을 끼워맞춘다.

---
# popl 프로젝트는 기존의 코딩스타일과 소스코드를 가능한 적게 건들면서 빠른 개발을 하기 위한 프로젝트다.

---
# 프레임워크 혹은 라이브러리는 새로 배우기 위해 존재하는 것이 아니라 쉽고 빠르며 안전한 개발을 위해 존재해야 한다.

---
# 초보자에게 클래스는 가혹하다.  
특히 순차적, 절차적, 객체지향적, 그리고 함수형 프로그래밍이 뭔가 기준없이 뒤섞인 PHP에서는 훨씬 더 가혹하다.

---
# PHP의 함수 이름이 제 멋대로라고? 
동의한다 그래도 직접 만드는것보단 낫지.  
사실 나도 마음에 안 들어서 함수 시그니쳐를 **내 취향대로** 바꾸고 있다.

---
# 전역변수가 어때서?

---
# POPL로 oop로 MVC 갖춰서 만드는것보다 더 빨리 명확하게 만들 수 있다는 걸 증명해주마.

---
# php 코어는 지금도 거대한 함수덩어리다.

---
# 모던 PHP 가 추구하는 것도 모든 프로젝트가 모든 면에서 반드시 현대적이어야 하는 걸 의미하지는 않을 것이다.

---
# 러닝커브가 너무 높아지면 쉽게 포기하게 된다.

---
# 모던 PHP도 좋습니다. 그런데 그럴꺼면 왜 php를 쓰죠?
쉽고 빠르게 개발하는 게 PHP의 매력이잖아요. php는 php 답게 씁시다.

---
# popl은 1인 개발자를 위한 라이브러리 셋이다.
협업은 고려하지 않는다.  
협업을 고려하면 코드 스타일이 정형화될 수 밖에 없다.  
코더가 되지 말고 개발자가 되자.  
  
게다가 코드 스타일이 정형화되어도 사실 실력이나 개발 습관에 따라 전혀 다른 코드가 나오는 거 다들 경험해 보셨잖아요?

---
# 코드 몽키와 개발자
코드 몽키와 개발자를 구분하는 법은 빠르게 개발하는 거에 만족하지 않고 더 이해하기 쉽고 더 변경하기 쉽고 더 빠르게 개발할 수 있을까를 고민하는 사람이다.

---
# 목표는 빠르게 뭔가를 만들어보는 거다.
심각한 생각은 그 다음에 하자.

---
# 누구나 코드몽키로 시작한다.

---
# NOT SERIOUS
이 이야기들은 거대한 농담에 가깝습니다.  
너무 심각하게 받아들이지 마세요.