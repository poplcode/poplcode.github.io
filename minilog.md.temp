# 뷰는 그냥 뷰다.
뭘 더 바라지? 왜 템플릿 엔진이 또 있어서 파서가 따로 있어야 하지? 

---
# 너무 방법론에 집착하지 말자.  
간단한 기능 하나를 위해서 파일을 5개쯤 만드는데 그 이유도 모른다면 그게 더 나쁜 것 아닌가?

---
# mvc는 필요없다.
컨트롤러가 데이터베이스까지 처리한다.  
우리에겐 모델을 만들고 정의하는 시간도 아깝기 때문이다.  
서비스? 그게 뭔데? 

---
# 커맨드 라인 인터페이스는 없다. 
모든 개발자가 다 커맨드를 잘 쓴다고 누가 그래?

---
# 파일 경로와 실제 웹 경로가 일치하는 건 사실 지극히 정상적인 것이다.  
원래 http 프로토콜은 웹 상에서 디렉토리 구조에 따라 정적으로 존재하는 html 파일을 보기 위해 만들어졌다.

---
# fancy url에 집착하지 말자
웹 주소가 `.php` 로 끝나도 대부분의 사용자는 그다지 신경쓰지 않는다.  
심지어는 사용자 대부분은 그 사실 자체를 잘 모를 것이다.  
그러니 너무 fancy url (clean url) 에 집착하지 말자.  
SEO에 치명적이라고? 구글이 바보가 아닌 이상 컨텐츠가 좋으면 url이 팬시하던 말던 별 상관없지 않을까?

---
# 라이브러리와 프레임워크의 차이
라이브러리와 프레임워크를 구별하는 가장 큰 포인트는 누가 제어권을 가져가는가에 있다.  
라이브러리는 개발자가 흐름을 제어하고 필요한 라이브러리를 가져다가 쓴다.  
프레임워크는 프레임워크가 흐름을 제어하고 개발자는 규칙에 따라 부품을 끼워맞춘다.

---
# popl 프로젝트는 기존의 코딩스타일과 소스코드를 가능한 적게 건들면서 빠른 개발을 하기 위한 프로젝트다.

---
# 프레임워크 혹은 라이브러리는 새로 배우기 위해 존재하는 것이 아니라 쉽고 빠르며 안전한 개발을 위해 존재해야 한다.

---
# 초보자에게 클래스는 가혹하다.  
특히 순차적, 절차적, 객체지향적, 그리고 함수형 프로그래밍이 뭔가 기준없이 뒤섞인 PHP에서는 훨씬 더 가혹하다.

---
# PHP의 함수 이름이 제 멋대로라고? 
동의한다 그래도 직접 만드는것보단 낫지.  
사실 나도 마음에 안 들어서 함수 시그니쳐를 **내 취향대로** 바꾸고 있다.

---
# 전역변수가 어때서?

---
# POPL로 oop로 MVC 갖춰서 만드는것보다 더 빨리 명확하게 만들 수 있다는 걸 증명해주마.

---
# php 코어는 지금도 거대한 함수덩어리다.

---
# 모던 PHP 가 추구하는 것도 모든 프로젝트가 모든 면에서 반드시 현대적이어야 하는 걸 의미하지는 않을 것이다.

---
# 러닝커브가 너무 높아지면 쉽게 포기하게 된다.

---
# 모던 PHP도 좋습니다. 그런데 그럴꺼면 왜 php를 쓰죠?
쉽고 빠르게 개발하는 게 PHP의 매력이잖아요. php는 php 답게 씁시다.

---
# popl은 1인 개발자를 위한 라이브러리 셋이다.
협업은 고려하지 않는다.  
협업을 고려하면 코드 스타일이 정형화될 수 밖에 없다.  
코더가 되지 말고 개발자가 되자.  
  
게다가 코드 스타일이 정형화되어도 사실 실력이나 개발 습관에 따라 전혀 다른 코드가 나오는 거 다들 경험해 보셨잖아요?

---
# 코드 몽키와 개발자
코드 몽키와 개발자를 구분하는 법은 빠르게 개발하는 거에 만족하지 않고 더 이해하기 쉽고 더 변경하기 쉽고 더 빠르게 개발할 수 있을까를 고민하는 사람이다.

---
# 목표는 빠르게 뭔가를 만들어보는 거다.
심각한 생각은 그 다음에 하자.

---
# 누구나 코드몽키로 시작한다.

---
# NOT SERIOUS
이 이야기들은 거대한 농담에 가깝습니다.  
너무 심각하게 받아들이지 마세요.